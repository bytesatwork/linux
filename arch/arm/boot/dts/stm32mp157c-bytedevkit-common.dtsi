// SPDX-License-Identifier: GPL-2.0
/*
 *  Copyright (C) 2020 bytes at work AG - http://www.bytesatwork.ch
 */

#include "stm32mp157c-byteengine-m5.dtsi"
#include <dt-bindings/net/ti-dp83867.h>

/ {
	aliases {
		serial0 = &uart4;
		ethernet0 = &ethernet0;
	};

	chosen {
		stdout-path = "serial0:115200n8";
	};

	memory@c0000000 {
		reg = <0xc0000000 0x20000000>;
	};

	usb_vbus: regulator-vbus {
		compatible = "regulator-fixed";
		regulator-name = "usb_en_vbus";
		gpio = <&gpiob 13 GPIO_ACTIVE_HIGH>;
		enable-active-high;
	};

	usbotg_vbus: regulator-vbus-otg {
		compatible = "regulator-fixed";
		regulator-name = "usbotg_en_vbus";
		gpio = <&gpiob 11 GPIO_ACTIVE_HIGH>;
		enable-active-high;
		regulator-boot-off;
	};

	panel_backlight: backlight {
		compatible = "pwm-backlight";
		pwms = <&pwm2 0 2000>;
		brightness-levels = <0 4 8 16 32 64 128 200 255>;
		default-brightness-level = <8>;
		power-supply = <&v3v3>;
	};
};

&pinctrl {
	uart4_pins_b: uart4-0 {
		pins1 {
			pinmux = <STM32_PINMUX('H', 13, AF8)>; /* UART4_TX */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};

		pins2 {
			pinmux = <STM32_PINMUX('H', 14, AF8)>; /* UART4_RX */
			bias-disable;
		};
	};

	uart4_idle_pins_b: uart4-idle-0 {
		pins1 {
			pinmux = <STM32_PINMUX('H', 13, ANALOG)>; /* UART4_TX */
		};

		pins2 {
			pinmux = <STM32_PINMUX('H', 14, AF8)>; /* UART4_RX */
			bias-disable;
		};
	};

	uart4_sleep_pins_b: uart4-sleep-0 {
		pins {
			pinmux = <STM32_PINMUX('H', 13, ANALOG)>, /* UART4_TX */
				 <STM32_PINMUX('H', 14, ANALOG)>; /* UART4_RX */
		};
	};

	pwm2_pins: pwm2-0 {
		pins {
			pinmux = <STM32_PINMUX('G', 8, AF1)>; /* TIM2_CH1 */
			bias-pull-down;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	pwm2_sleep_pins: pwm2-sleep-0 {
		pins {
			pinmux = <STM32_PINMUX('G', 8, ANALOG)>; /* TIM2_CH1 */
		};
	};

	usbotg_hs_pins_a: usbotg_hs-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 10, ANALOG)>; /* OTG_ID */            /* configure 'PA10' as ANALOG */
		};
	};
};

&uart4 {
	pinctrl-names = "default", "sleep", "idle", "no_console_suspend";
	pinctrl-0 = <&uart4_pins_b>;
	pinctrl-1 = <&uart4_sleep_pins_b>;
	pinctrl-2 = <&uart4_idle_pins_b>;
	pinctrl-3 = <&uart4_pins_b>;
	status = "okay";
};

&sdmmc1 {
	pinctrl-names = "default", "opendrain", "sleep";
	pinctrl-0 = <&sdmmc1_b4_pins_a>;
	pinctrl-1 = <&sdmmc1_b4_od_pins_a>;
	pinctrl-2 = <&sdmmc1_b4_sleep_pins_a>;
	broken-cd;
	st,neg-edge;
	bus-width = <4>;
	vmmc-supply = <&v3v3>;
	status = "okay";
};

&usbh_ehci {
	phys = <&usbphyc_port0>;
	phy-names = "usb";
	vbus-supply = <&usb_vbus>;
	status = "okay";
};

&usbh_ohci {
	phys = <&usbphyc_port0>;           /* Use USBPHYC HS PHY port, mapped on USBH controller */
	phy-names = "usb";
	vbus-supply = <&usb_vbus>;
	status = "okay";
};

&usbphyc {
	vdd3v3-supply = <&vdd_usb>;
	status = "okay";
};


/* USB OTG Port (peripheral only) */
&usbotg_hs {
	pinctrl-names = "default";
	pinctrl-0 = <&usbotg_hs_pins_a>;
	dr_mode = "peripheral";
	phys = <&usbphyc_port1 0>;
	phy-names = "usb2-phy";
	vbus-supply = <&usbotg_vbus>;
	status = "okay";
};

&iwdg2 {
	timeout-sec = <32>;
	status = "okay";
};

&dsi {
	#address-cells = <1>;
	#size-cells = <0>;
	status = "okay";

	ports {
		#address-cells = <1>;
		#size-cells = <0>;

		port@0 {
			reg = <0>;
			dsi_in: endpoint {
				remote-endpoint = <&ltdc_ep0_out>;
			};
		};

		port@1 {
			reg = <1>;
			dsi_out: endpoint {
				remote-endpoint = <&dsi_panel_in>;
			};
		};
	};

	panel-dsi@0 {
		compatible = "youritech,ili9806";
		reg = <0>;
		reset-gpios = <&gpiog 2 GPIO_ACTIVE_LOW>;
		power-supply = <&v3v3>;
		backlight = <&panel_backlight>;
		status = "okay";

		port {
			dsi_panel_in: endpoint {
				remote-endpoint = <&dsi_out>;
			};
		};
	};
};

&ltdc {
	status = "okay";

	port {
		#address-cells = <1>;
		#size-cells = <0>;

		ltdc_ep0_out: endpoint@0 {
			reg = <0>;
			remote-endpoint = <&dsi_in>;
		};
	};
};

/* Backlight PWM */
&timers2 {
	/* spare dmas for other usage (un-delete to enable pwm capture) */
	/delete-property/dmas;
	/delete-property/dma-names;
	status = "okay";

	pwm2: pwm {
		pinctrl-0 = <&pwm2_pins>;
		pinctrl-1 = <&pwm2_sleep_pins>;
		pinctrl-names = "default", "sleep";
		#pwm-cells = <2>;
		status = "okay";
	};
};

&rtc {
	status = "okay";
};

&rng1 {
	status = "okay";
};
